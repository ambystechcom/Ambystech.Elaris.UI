name: Publish to NuGet

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml

    - name: Display calculated version
      run: |
        echo "Version: ${{ steps.gitversion.outputs.semVer }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"

    - name: Update csproj version
      run: |
        sed -i 's/<Version>.*<\/Version>/<Version>${{ steps.gitversion.outputs.nuGetVersionV2 }}<\/Version>/' src/Ambystech.Elaris.UI.csproj

    - name: Restore dependencies
      run: dotnet restore src/Ambystech.Elaris.UI.csproj

    - name: Build
      run: dotnet build src/Ambystech.Elaris.UI.csproj --configuration Release --no-restore

    - name: Test
      run: dotnet test tests/Ambystech.Elaris.UI.Tests.csproj --configuration Release --verbosity normal

    - name: Pack
      run: dotnet pack src/Ambystech.Elaris.UI.csproj --configuration Release --no-build --output ./artifacts

    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ steps.gitversion.outputs.semVer }}" -m "Release v${{ steps.gitversion.outputs.semVer }}"
        git push origin "v${{ steps.gitversion.outputs.semVer }}"

    - name: Publish to NuGet
      run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Generate Release Notes
      id: release_notes
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.gitversion.outputs.semVer }}
        release_name: Release v${{ steps.gitversion.outputs.semVer }}
        body: |
          ## Changes in this Release

          ${{ steps.release_notes.outputs.changelog }}

          ## NuGet Package

          This release is available on NuGet.org:
          ```
          dotnet add package Ambystech.Elaris.UI --version ${{ steps.gitversion.outputs.nuGetVersionV2 }}
          ```
        draft: false
        prerelease: ${{ contains(steps.gitversion.outputs.nuGetVersionV2, '-') }}

    - name: Upload NuGet package to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/Ambystech.Elaris.UI.${{ steps.gitversion.outputs.nuGetVersionV2 }}.nupkg
        asset_name: Ambystech.Elaris.UI.${{ steps.gitversion.outputs.nuGetVersionV2 }}.nupkg
        asset_content_type: application/zip

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./artifacts/*.nupkg
